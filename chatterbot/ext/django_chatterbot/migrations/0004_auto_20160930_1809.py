# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2016-09-30 18:09
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('django_chatterbot', '0003_auto_20160930_1526'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChatUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('username', models.CharField(max_length=64, unique=True)),
                ('full_name', models.CharField(blank=True, max_length=128)),
                ('gender', models.CharField(blank=True, help_text='Categorical variable to facilitate personality learning', max_length=32)),
                ('chat_age', models.FloatField(blank=True, help_text='Scalar between 0 and 100 estimating age of a user based solely on their chat style, word choice.', max_length=32, null=True)),
                ('kindness', models.FloatField(blank=True, default=0.0, help_text='Probability (0-1) of making a kind statement')),
                ('hurtfulness', models.FloatField(default=0.0, help_text='Probability (0-1) of making an unkind, cruel, hurtful statement')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('positive', models.FloatField(blank=True, default=None, help_text='VADER positive valence (emotion) intensity in a statement (see Hutto, C.J. & Gilbert)', null=True)),
                ('negative', models.FloatField(blank=True, default=None, help_text='VADER negative valence (emotion) intensity in a statement (see Hutto, C.J. & Gilbert)', null=True)),
                ('neutral', models.FloatField(blank=True, default=None, help_text='VADER neutral valence (emotion) intensity in a statement (see Hutto, C.J. & Gilbert)', null=True)),
                ('compound', models.FloatField(blank=True, default=None, help_text='VADER compound valence intensity from NLTK.SentimentIntensityAnalyzer (see Hutto, C.J. & Gilbert)', null=True)),
                ('flesch', models.FloatField(blank=True, default=None, help_text='Flesch Reading Ease based on sylable, word, and sentence counts (from `readability.superficial_measures["readability grades"]`).', null=True)),
                ('kincaid', models.FloatField(blank=True, default=None, help_text='Kincaid grade level (from `readbility.superficial_measures["readability grades"]`)', null=True)),
                ('dale_chall', models.FloatField(blank=True, default=None, help_text='Readability percent, 0-100, based on occurrence of 3000 most common English words (from `textstat.dale_chall_readability_score`)', null=True)),
                ('intensity', models.FloatField(blank=True, default=None, help_text='Emotional intensity (from VADER by Hutto, C.J. & Gilbert)', null=True)),
                ('kindness', models.FloatField(blank=True, default=None, help_text='Probability (0-1) of making a kind statement', null=True)),
                ('sarcasm', models.FloatField(blank=True, default=None, help_text='Lack of sincerity in a statement', null=True)),
                ('readability', models.FloatField(blank=True, default=None, help_text='Probability (0-1) of making a kind statement', null=True)),
                ('chat_age', models.FloatField(blank=True, default=None, help_text='Oldfashioned-ness, negative hipness, in mean age of the utterance distribution in time', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RemoveField(
            model_name='statement',
            name='id',
        ),
        migrations.RemoveField(
            model_name='statement',
            name='user',
        ),
        migrations.AddField(
            model_name='statement',
            name='possibile',
            field=models.ManyToManyField(through='django_chatterbot.Response', to='django_chatterbot.Statement'),
        ),
        migrations.AlterField(
            model_name='response',
            name='response',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='django_chatterbot.Statement', verbose_name='Response statement'),
        ),
        migrations.AlterField(
            model_name='response',
            name='statement',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='in_response_to', to='django_chatterbot.Statement', verbose_name='Prompting statement'),
        ),
        migrations.DeleteModel(
            name='User',
        ),
        migrations.AddField(
            model_name='chatuser',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='statement',
            name='chat_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='django_chatterbot.ChatUser'),
        ),
        migrations.AddField(
            model_name='statement',
            name='score',
            field=models.OneToOneField(default=None, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='django_chatterbot.Score'),
            preserve_default=False,
        ),
    ]
